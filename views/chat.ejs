<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SSH Chat Assistant</title>
  <link rel="stylesheet" href="/css/design-system.css">
  <style>
    body {
      font-family: var(--font-family-base);
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      height: 100vh;
      background-color: var(--gray-100);
      overflow: hidden;
    }
    
    .navbar {
      background-color: var(--primary);
      padding: 0.75rem 1.5rem;
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: var(--shadow);
      z-index: 10;
    }
    
    .navbar-brand img {
      height: 35px;
    }
    
    .connection-info {
      display: flex;
      align-items: center;
      font-size: 1rem;
      background-color: rgba(255, 255, 255, 0.1);
      padding: 0.5rem 1rem;
      border-radius: var(--border-radius);
      margin-left: 1rem;
    }
    
    .connection-badge {
      display: inline-flex;
      align-items: center;
      background-color: rgba(0, 0, 0, 0.2);
      color: #fff;
      padding: 0.25rem 0.5rem;
      border-radius: var(--border-radius-sm);
      font-size: var(--font-size-sm);
      margin-left: 0.5rem;
    }
    
    .connection-badge .status-dot {
      width: 8px;
      height: 8px;
      background-color: #4CAF50;
      border-radius: 50%;
      display: inline-block;
      margin-right: 5px;
    }
    
    .navbar-buttons {
      display: flex;
      gap: 0.5rem;
    }
    
    .main-container {
      display: flex;
      flex: 1;
      overflow: hidden;
    }
    
    .sidebar {
      width: 280px;
      background-color: white;
      border-right: 1px solid var(--gray-300);
      display: flex;
      flex-direction: column;
      transition: all 0.3s ease;
      overflow: hidden;
    }
    
    .sidebar.collapsed {
      width: 0;
    }
    
    .sidebar-header {
      padding: 1rem;
      border-bottom: 1px solid var(--gray-300);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .sidebar-title {
      font-weight: var(--font-weight-bold);
      color: var(--gray-700);
      margin: 0;
    }
    
    .sidebar-toggle {
      background: none;
      border: none;
      cursor: pointer;
      color: var(--gray-600);
    }
    
    .file-explorer {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
    }
    
    .folder-tree {
      margin: 0;
      padding: 0;
      list-style: none;
    }
    
    .folder-item, .file-item {
      margin-bottom: 0.5rem;
    }
    
    .folder-item > .folder-name {
      display: flex;
      align-items: center;
      cursor: pointer;
      padding: 0.5rem;
      border-radius: var(--border-radius);
      transition: var(--transition-base);
    }
    
    .folder-item > .folder-name:hover {
      background-color: var(--gray-200);
    }
    
    .folder-icon, .file-icon {
      margin-right: 0.5rem;
      color: var(--gray-600);
    }
    
    .folder-contents {
      margin-left: 1.5rem;
      padding-left: 0.5rem;
      border-left: 1px dashed var(--gray-400);
      display: none;
    }
    
    .folder-contents.open {
      display: block;
    }
    
    .file-item {
      display: flex;
      align-items: center;
      padding: 0.5rem;
      border-radius: var(--border-radius);
      cursor: pointer;
      transition: var(--transition-base);
    }
    
    .file-item:hover {
      background-color: var(--gray-200);
    }
    
    .chat-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      background-color: white;
      overflow: hidden;
    }
    
    .chat-header {
      padding: 1rem;
      background-color: var(--gray-100);
      border-bottom: 1px solid var(--gray-300);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .chat-title {
      font-weight: var(--font-weight-bold);
      color: var(--gray-700);
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .chat-title svg {
      margin-right: 0.5rem;
    }
    
    .chat-actions {
      display: flex;
      gap: 0.5rem;
    }
    
    .chat-action {
      background: none;
      border: none;
      cursor: pointer;
      color: var(--gray-600);
      padding: 0.25rem;
      border-radius: var(--border-radius-sm);
      transition: var(--transition-base);
    }
    
    .chat-action:hover {
      background-color: var(--gray-300);
      color: var(--gray-900);
    }
    
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
      background-color: var(--gray-100);
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    
    .message {
      max-width: 80%;
      padding: 1rem;
      border-radius: var(--border-radius-lg);
      animation: fadeIn 0.3s ease;
      position: relative;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .message.user {
      align-self: flex-end;
      background-color: var(--primary);
      color: white;
      border-bottom-right-radius: 0;
    }
    
    .message.assistant {
      align-self: flex-start;
      background-color: white;
      border: 1px solid var(--gray-300);
      border-bottom-left-radius: 0;
    }
    
    .message-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
      font-size: var(--font-size-sm);
    }
    
    .message-sender {
      font-weight: var(--font-weight-bold);
    }
    
    .message-time {
      color: var(--gray-500);
      font-size: var(--font-size-xs);
    }
    
    .message.user .message-time {
      color: rgba(255, 255, 255, 0.8);
    }
    
    .message-content {
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    .message-content code {
      background-color: rgba(0, 0, 0, 0.1);
      padding: 0.2rem 0.4rem;
      border-radius: var(--border-radius-sm);
      font-family: monospace;
      font-size: 0.9em;
    }
    
    .message.user .message-content code {
      background-color: rgba(255, 255, 255, 0.2);
    }
    
    .message-file {
      margin-top: 0.5rem;
      padding: 0.5rem;
      background-color: rgba(0, 0, 0, 0.05);
      border-radius: var(--border-radius);
      font-family: monospace;
      font-size: 0.9em;
      max-height: 200px;
      overflow-y: auto;
      word-break: break-all;
      white-space: pre-wrap;
    }
    
    .message.user .message-file {
      background-color: rgba(255, 255, 255, 0.1);
    }
    
    .message-file-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
      font-size: var(--font-size-sm);
      padding-bottom: 0.5rem;
      border-bottom: 1px dashed rgba(0, 0, 0, 0.1);
    }
    
    .message.user .message-file-header {
      border-bottom-color: rgba(255, 255, 255, 0.2);
    }
    
    .chat-input-container {
      padding: 1rem;
      background-color: white;
      border-top: 1px solid var(--gray-300);
    }
    
    .chat-form {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .chat-toolbar {
      display: flex;
      gap: 0.5rem;
      padding: 0.5rem;
      background-color: var(--gray-100);
      border-radius: var(--border-radius);
    }
    
    .toolbar-button {
      background: none;
      border: none;
      color: var(--gray-600);
      cursor: pointer;
      padding: 0.5rem;
      border-radius: var(--border-radius-sm);
      transition: var(--transition-base);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .toolbar-button:hover {
      background-color: var(--gray-300);
      color: var(--gray-900);
    }
    
    .chat-input {
      display: flex;
      gap: 0.5rem;
    }
    
    .chat-textarea {
      flex: 1;
      padding: 0.8rem;
      border: 1px solid var(--gray-300);
      border-radius: var(--border-radius);
      resize: none;
      min-height: 60px;
      max-height: 200px;
      transition: var(--transition-base);
      font-family: var(--font-family-base);
    }
    
    .chat-textarea:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 3px rgba(0, 92, 160, 0.2);
    }
    
    .send-button {
      background-color: var(--primary);
      color: white;
      border: none;
      border-radius: var(--border-radius);
      padding: 0 1rem;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition-base);
    }
    
    .send-button:hover {
      background-color: var(--primary-dark);
    }
    
    .send-button:disabled {
      background-color: var(--gray-400);
      cursor: not-allowed;
    }
    
    /* File preview modal */
    .file-preview-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 100;
      justify-content: center;
      align-items: center;
    }
    
    .file-preview-container {
      background-color: white;
      width: 80%;
      max-width: 800px;
      max-height: 80vh;
      border-radius: var(--border-radius-lg);
      box-shadow: var(--shadow-lg);
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    
    .file-preview-header {
      padding: 1rem;
      background-color: var(--gray-100);
      border-bottom: 1px solid var(--gray-300);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .file-preview-title {
      font-weight: var(--font-weight-bold);
      margin: 0;
      display: flex;
      align-items: center;
    }
    
    .file-preview-title svg {
      margin-right: 0.5rem;
    }
    
    .file-preview-close {
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--gray-600);
    }
    
    .file-preview-content {
      padding: 1rem;
      overflow-y: auto;
      flex: 1;
    }
    
    .file-preview-actions {
      padding: 1rem;
      border-top: 1px solid var(--gray-300);
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
    }
    
    .file-code {
      font-family: monospace;
      white-space: pre-wrap;
      word-break: break-word;
      padding: 1rem;
      background-color: var(--gray-100);
      border-radius: var(--border-radius);
      max-height: 400px;
      overflow-y: auto;
    }
    
    /* Settings modal */
    .settings-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 100;
      justify-content: center;
      align-items: center;
    }
    
    .settings-container {
      background-color: white;
      width: 90%;
      max-width: 500px;
      border-radius: var(--border-radius-lg);
      box-shadow: var(--shadow-lg);
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }
    
    .settings-header {
      padding: 1rem;
      background-color: var(--gray-100);
      border-bottom: 1px solid var(--gray-300);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .settings-title {
      font-weight: var(--font-weight-bold);
      margin: 0;
    }
    
    .settings-close {
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--gray-600);
    }
    
    .settings-content {
      padding: 1rem;
    }
    
    .settings-form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    
    .settings-footer {
      padding: 1rem;
      border-top: 1px solid var(--gray-300);
      display: flex;
      justify-content: flex-end;
      gap: 0.5rem;
    }
    
    /* Loading indicator */
    .loading-indicator {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 1rem;
      color: var(--gray-600);
    }
    
    .typing-indicator {
      display: flex;
      align-items: center;
      padding: 0.5rem 1rem;
      color: var(--gray-600);
      font-style: italic;
      align-self: flex-start;
      margin-left: 1rem;
    }
    
    .typing-indicator::before {
      content: '';
      width: 6px;
      height: 6px;
      background-color: var(--gray-600);
      border-radius: 50%;
      margin-right: 0.5rem;
      animation: pulse 1.5s infinite;
    }
    
    @keyframes pulse {
      0% { opacity: 0.2; }
      50% { opacity: 1; }
      100% { opacity: 0.2; }
    }
    
    .code-block {
      background-color: var(--gray-800);
      color: var(--gray-200);
      padding: 1rem;
      border-radius: var(--border-radius);
      font-family: monospace;
      margin: 0.5rem 0;
      overflow-x: auto;
      position: relative;
    }
    
    .code-block pre {
      margin: 0;
      white-space: pre-wrap;
      word-break: break-word;
    }
    
    .copy-code-button {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background-color: rgba(255, 255, 255, 0.1);
      border: none;
      color: var(--gray-300);
      padding: 0.25rem 0.5rem;
      border-radius: var(--border-radius-sm);
      cursor: pointer;
      font-size: var(--font-size-sm);
      transition: var(--transition-base);
    }
    
    .copy-code-button:hover {
      background-color: rgba(255, 255, 255, 0.2);
      color: white;
    }
    
    /* File navigation breadcrumb */
    .file-path-breadcrumb {
      padding: 0.5rem 1rem;
      background-color: var(--gray-100);
      border-bottom: 1px solid var(--gray-300);
      overflow-x: auto;
      white-space: nowrap;
      font-size: var(--font-size-sm);
    }
    
    .path-segment {
      color: var(--primary);
      cursor: pointer;
      text-decoration: none;
    }
    
    .path-segment:hover {
      text-decoration: underline;
    }
    
    .path-separator {
      color: var(--gray-500);
      margin: 0 0.25rem;
    }
    
    /* File upload progress */
    .file-upload-progress {
      margin-top: 0.5rem;
      background-color: var(--gray-200);
      border-radius: var(--border-radius);
      overflow: hidden;
      height: 4px;
    }
    
    .file-upload-progress-bar {
      height: 100%;
      background-color: var(--primary);
      width: 0%;
      transition: width 0.3s ease;
    }
    
    /* Responsiveness */
    @media (max-width: 768px) {
      .main-container {
        flex-direction: column;
      }
      
      .sidebar {
        width: 100%;
        height: 250px;
        border-right: none;
        border-bottom: 1px solid var(--gray-300);
      }
      
      .sidebar.collapsed {
        height: 0;
      }
    }
    
    /* Syntax highlighting */
    .token.comment,
    .token.prolog,
    .token.doctype,
    .token.cdata {
      color: #6a9955;
    }
    
    .token.punctuation {
      color: #d4d4d4;
    }
    
    .token.property,
    .token.tag,
    .token.boolean,
    .token.number,
    .token.constant,
    .token.symbol,
    .token.deleted {
      color: #b5cea8;
    }
    
    .token.selector,
    .token.attr-name,
    .token.string,
    .token.char,
    .token.builtin,
    .token.inserted {
      color: #ce9178;
    }
    
    .token.operator,
    .token.entity,
    .token.url,
    .language-css .token.string,
    .style .token.string {
      color: #d4d4d4;
      background: none;
    }
    
    .token.atrule,
    .token.attr-value,
    .token.keyword {
      color: #c586c0;
    }
    
    .token.function {
      color: #dcdcaa;
    }
    
    .token.regex,
    .token.important,
    .token.variable {
      color: #d16969;
    }
    
    .token.important,
    .token.bold {
      font-weight: bold;
    }
    
    .token.italic {
      font-style: italic;
    }
    
    .token.constant {
      color: #9cdcfe;
    }
    
    .token.class-name {
      color: #4ec9b0;
    }
    
    .token.parameter {
      color: #9cdcfe;
    }
    
    .token.interpolation {
      color: #9cdcfe;
    }
    
    .token.function-variable {
      color: #4ec9b0;
    }
    
    .token.boolean {
      color: #569cd6;
    }
    
    .token.number {
      color: #b5cea8;
    }
    
    .token.selector,
    .token.attr-name,
    .token.string,
    .token.char,
    .token.builtin,
    .token.inserted {
      color: #ce9178;
    }
    
    .token.operator {
      color: #d4d4d4;
    }
    
    .token.entity,
    .token.url,
    .language-css .token.string,
    .style .token.string {
      color: #d4d4d4;
    }
  </style>
</head>
<body>
  <nav class="navbar">
    <div class="d-flex align-items-center" style="flex-wrap: wrap;">
      <a class="navbar-brand" href="/">
        <img src="https://assets.tracklead.com/assets/logo-tracklead-branca.png" alt="TrackLead Logo">
      </a>
      <div class="connection-info">
        <span>SSH:</span>
        <strong style="margin-left: 5px;"><%= username %>@<%= host %></strong>
        <span class="connection-badge">
          <span class="status-dot"></span>Connected
        </span>
      </div>
    </div>
    
    <div class="navbar-buttons">
      <a href="/terminal" class="btn btn-sm" style="background-color: rgba(0,0,0,0.2); color: white;">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
          <path d="M6 9a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3A.5.5 0 0 1 6 9zM3.854 4.146a.5.5 0 1 0-.708.708L4.793 6.5 3.146 8.146a.5.5 0 1 0 .708.708l2-2a.5.5 0 0 0 0-.708l-2-2z"/>
          <path d="M2 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2H2zm12 1a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V3a1 1 0 0 1 1-1h12z"/>
        </svg>
        Terminal
      </a>
      <a href="/file_manager" class="btn btn-sm" style="background-color: rgba(0,0,0,0.2); color: white;">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
          <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z"/>
        </svg>
        File Manager
      </a>
      <a href="/disconnect" class="btn btn-sm" style="background-color: rgba(0,0,0,0.2); color: white;">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
          <path fill-rule="evenodd" d="M8 3a5 5 0 0 0-5 5v1h1a1 1 0 0 1 1 1v3a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V8a6 6 0 1 1 12 0v5a1 1 0 0 1-1 1h-1a1 1 0 0 1-1-1v-3a1 1 0 0 1 1-1h1V8a5 5 0 0 0-5-5z"/>
        </svg>
        Disconnect
      </a>
      <a href="/logout" class="btn btn-sm" style="background-color: var(--danger); color: white;">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: text-bottom; margin-right: 5px;">
          <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
          <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
        </svg>
        Logout
      </a>
    </div>
  </nav>
  
  <div class="main-container">
    <!-- Sidebar with File Explorer -->
    <div class="sidebar" id="file-sidebar">
      <div class="sidebar-header">
        <h3 class="sidebar-title">File Explorer</h3>
        <button class="sidebar-toggle" id="sidebar-toggle" title="Toggle sidebar">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
          </svg>
        </button>
      </div>
      
      <div class="file-path-breadcrumb" id="file-path-breadcrumb">
        <span class="path-segment" data-path="<%= initialPath %>">~</span>
      </div>
      
      <div class="file-explorer" id="file-explorer">
        <div class="loading-indicator" id="file-loading">
          <span>Loading...</span>
        </div>
        <ul class="folder-tree" id="folder-tree"></ul>
      </div>
    </div>
    
    <!-- Chat Container -->
    <div class="chat-container">
      <div class="chat-header">
        <h3 class="chat-title">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
            <path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/>
            <path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9.06 9.06 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.437 10.437 0 0 1-.524 2.318l-.003.011a10.722 10.722 0 0 1-.244.637c-.079.186.074.394.273.362a21.673 21.673 0 0 0 .693-.125zm.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6c0 3.193-3.004 6-7 6a8.06 8.06 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a10.97 10.97 0 0 0 .398-2z"/>
          </svg>
          AI Assistant
        </h3>
        <div class="chat-actions">
          <button class="chat-action" id="refresh-chat" title="Refresh">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
              <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
            </svg>
          </button>
          <button class="chat-action" id="clear-chat" title="Clear chat">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5Zm-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5ZM4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06Zm6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528ZM8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5Z"/>
            </svg>
          </button>
          <button class="chat-action" id="settings-button" title="Settings">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
            </svg>
          </button>
        </div>
      </div>
      
      <div class="chat-messages" id="chat-messages">
        <!-- Messages will be added here -->
      </div>
      
      <div class="chat-input-container">
        <form class="chat-form" id="chat-form">
          <div class="chat-toolbar">
            <button type="button" class="toolbar-button" id="toggle-file-selector" title="Insert file reference">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"/>
              </svg>
            </button>
            <button type="button" class="toolbar-button" id="list-directory" title="List directory contents">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M2 2.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5V3a.5.5 0 0 0-.5-.5H2zM3 3H2v1h1V3z"/>
                <path d="M5 3.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5zM5.5 7a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9zm0 4a.5.5 0 0 0 0 1h9a.5.5 0 0 0 0-1h-9z"/>
                <path fill-rule="evenodd" d="M1.5 7a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5V7zM2 7h1v1H2V7zm0 3.5a.5.5 0 0 0-.5.5v1a.5.5 0 0 0 .5.5h1a.5.5 0 0 0 .5-.5v-1a.5.5 0 0 0-.5-.5H2zm1 .5H2v1h1v-1z"/>
              </svg>
            </button>
            <span style="flex: 1;"></span>
            <button type="button" class="toolbar-button" id="clear-input" title="Clear input">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M14 1a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z"/>
                <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
              </svg>
            </button>
          </div>
          
          <div class="chat-input">
            <textarea id="message-input" class="chat-textarea" placeholder="Type your message here..." rows="2"></textarea>
            <button type="submit" class="send-button" id="send-button" disabled>
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M15.964.686a.5.5 0 0 0-.65-.65L.767 5.855H.766l-.452.18a.5.5 0 0 0-.082.887l.41.26.001.002 4.995 3.178 3.178 4.995.002.002.26.41a.5.5 0 0 0 .886-.083l6-15Zm-1.833 1.89L6.637 10.07l-.215-.338a.5.5 0 0 0-.154-.154l-.338-.215 7.494-7.494 1.178-.471-.47 1.178Z"/>
              </svg>
            </button>
          </div>
          
          <div id="file-upload-progress" class="file-upload-progress" style="display: none;">
            <div id="file-upload-progress-bar" class="file-upload-progress-bar"></div>
          </div>
        </form>
      </div>
    </div>
  </div>
  
  <!-- File Preview Modal -->
  <div class="file-preview-modal" id="file-preview-modal">
    <div class="file-preview-container">
      <div class="file-preview-header">
        <h3 class="file-preview-title" id="file-preview-title">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
            <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"/>
          </svg>
          <span id="preview-filename">file.txt</span>
        </h3>
        <button class="file-preview-close" id="file-preview-close">&times;</button>
      </div>
      
      <div class="file-preview-content" id="file-preview-content">
        <!-- File content will be displayed here -->
      </div>
      
      <div class="file-preview-actions">
        <button class="btn btn-secondary" id="close-preview-btn">Close</button>
        <button class="btn btn-primary" id="share-file-btn">Share in Chat</button>
      </div>
    </div>
  </div>
  
  <!-- Settings Modal -->
  <div class="settings-modal" id="settings-modal">
    <div class="settings-container">
      <div class="settings-header">
        <h3 class="settings-title">Chat Settings</h3>
        <button class="settings-close" id="settings-close">&times;</button>
      </div>
      
      <div class="settings-content">
        <form class="settings-form" id="settings-form">
          <div class="form-group">
            <label for="api-provider" class="form-label">AI Provider</label>
            <select id="api-provider" class="form-control">
              <option value="openai">OpenAI</option>
              <option value="anthropic">Anthropic</option>
              <option value="deepseek">DeepSeek</option>
            </select>
            <div class="help-text">Select which AI provider to use for chat assistance</div>
          </div>
          
          <div class="form-group">
            <label for="token-limit" class="form-label">Token Limit</label>
            <input type="number" id="token-limit" class="form-control" min="1000" max="100000" step="1000" value="4000">
            <div class="help-text">Maximum tokens per message (4000-16000 recommended)</div>
          </div>
          
          <div class="form-group">
            <label for="temperature" class="form-label">Temperature</label>
            <input type="range" id="temperature" class="form-control" min="0" max="1" step="0.1" value="0.7">
            <div class="d-flex justify-content-between">
              <span>More Focused (0.0)</span>
              <span id="temp-value">0.7</span>
              <span>More Creative (1.0)</span>
            </div>
            <div class="help-text">Controls randomness of responses</div>
          </div>
          
          <div class="form-check">
            <input type="checkbox" id="auto-share-context" class="form-check-input" checked>
            <label for="auto-share-context" class="form-check-label">Auto-share file context</label>
            <div class="help-text">Automatically share relevant file context with the AI</div>
          </div>
        </form>
      </div>
      
      <div class="settings-footer">
        <button class="btn btn-secondary" id="settings-cancel">Cancel</button>
        <button class="btn btn-primary" id="settings-save">Save Settings</button>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // DOM elements
      const fileSidebar = document.getElementById('file-sidebar');
      const sidebarToggle = document.getElementById('sidebar-toggle');
      const fileExplorer = document.getElementById('file-explorer');
      const folderTree = document.getElementById('folder-tree');
      const fileLoading = document.getElementById('file-loading');
      const chatMessages = document.getElementById('chat-messages');
      const messageInput = document.getElementById('message-input');
      const sendButton = document.getElementById('send-button');
      const chatForm = document.getElementById('chat-form');
      const refreshChat = document.getElementById('refresh-chat');
      const clearChat = document.getElementById('clear-chat');
      const filePathBreadcrumb = document.getElementById('file-path-breadcrumb');
      const filePreviewModal = document.getElementById('file-preview-modal');
      const filePreviewClose = document.getElementById('file-preview-close');
      const closePreviewBtn = document.getElementById('close-preview-btn');
      const shareFileBtn = document.getElementById('share-file-btn');
      const filePreviewContent = document.getElementById('file-preview-content');
      const previewFilename = document.getElementById('preview-filename');
      const settingsButton = document.getElementById('settings-button');
      const settingsModal = document.getElementById('settings-modal');
      const settingsClose = document.getElementById('settings-close');
      const settingsCancel = document.getElementById('settings-cancel');
      const settingsSave = document.getElementById('settings-save');
      const settingsForm = document.getElementById('settings-form');
      const temperatureInput = document.getElementById('temperature');
      const tempValue = document.getElementById('temp-value');
      const toggleFileSelector = document.getElementById('toggle-file-selector');
      const listDirectoryBtn = document.getElementById('list-directory');
      const clearInputBtn = document.getElementById('clear-input');
      
      // Project and Chat State
      const projectId = '<%= host %>_<%= username %>_<%= initialPath.replace(/\//g, "_") %>';
      let currentPath = '<%= initialPath %>';
      let chatHistory = [];
      let fileContext = [];
      let currentFilePreview = null;
      let isProcessingLargeMessage = false;
      let largeMessageBuffer = [];
      
      // Chat settings
      let chatSettings = {
        apiProvider: 'openai',
        tokenLimit: 4000,
        temperature: 0.7,
        autoShareContext: true
      };
      
      // Load chat settings from localStorage
      function loadChatSettings() {
        const savedSettings = localStorage.getItem(`chat_settings_${projectId}`);
        if (savedSettings) {
          try {
            const parsed = JSON.parse(savedSettings);
            chatSettings = { ...chatSettings, ...parsed };
            
            // Update form values
            document.getElementById('api-provider').value = chatSettings.apiProvider;
            document.getElementById('token-limit').value = chatSettings.tokenLimit;
            document.getElementById('temperature').value = chatSettings.temperature;
            document.getElementById('auto-share-context').checked = chatSettings.autoShareContext;
            tempValue.textContent = chatSettings.temperature;
          } catch (error) {
            console.error('Error loading chat settings:', error);
          }
        }
      }
      
      // Save chat settings to localStorage
      function saveChatSettings() {
        chatSettings.apiProvider = document.getElementById('api-provider').value;
        chatSettings.tokenLimit = parseInt(document.getElementById('token-limit').value);
        chatSettings.temperature = parseFloat(document.getElementById('temperature').value);
        chatSettings.autoShareContext = document.getElementById('auto-share-context').checked;
        
        localStorage.setItem(`chat_settings_${projectId}`, JSON.stringify(chatSettings));
      }
      
      // Generate a session ID from the current session
      const sessionId = Math.random().toString(36).substring(2, 15);
      
      // Initialize Socket.IO connection
      const socket = io({
        query: {
          sessionId: sessionId
        }
      });
      
      // Connect to SSH SFTP when page loads
      socket.emit('connect-sftp', {
        sshConfig: {
          host: '<%= host %>',
          port: <%= port || 22 %>,
          username: '<%= username %>',
          password: '<%= typeof password !== "undefined" ? password : "" %>'
        },
        initialPath: '<%= initialPath %>'
      });
      
      // Listen for SFTP connection
      socket.on('sftp-connected', (data) => {
        currentPath = data.initialPath;
        updateFileBreadcrumb(currentPath);
        listDirectory(currentPath);
        
        // Add welcome message
        addSystemMessage('Welcome to the SSH AI Assistant! I can help you with:');
        addSystemMessage('- Exploring your project files and understanding code');
        addSystemMessage('- Answering questions about your project');
        addSystemMessage('- Suggesting code improvements or solutions');
        addSystemMessage('- Helping with development tasks and troubleshooting');
        addSystemMessage('\nYou can share files from the sidebar by clicking on them, or use the file button in the chat input to reference specific files. Type /help for more commands.');
        
        // Load chat history
        loadChatHistory();
      });
      
      // Listen for directory listing
      socket.on('directory-list', (data) => {
        renderDirectoryListing(data.path, data.files);
        fileLoading.style.display = 'none';
      });
      
      // Listen for file content
      socket.on('file-content', (data) => {
        showFilePreview(data.path, data.content);
      });
      
      // Handle SFTP errors
      socket.on('sftp-error', (error) => {
        fileLoading.style.display = 'none';
        alert(`SFTP Error: ${error}`);
      });
      
      // Toggle sidebar
      sidebarToggle.addEventListener('click', () => {
        fileSidebar.classList.toggle('collapsed');
        
        // Update toggle button icon
        if (fileSidebar.classList.contains('collapsed')) {
          sidebarToggle.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
            </svg>
          `;
        } else {
          sidebarToggle.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
            </svg>
          `;
        }
      });
      
      // List directory contents
      function listDirectory(path) {
        fileLoading.style.display = 'flex';
        folderTree.innerHTML = '';
        socket.emit('list-directory', { path });
      }
      
      // Render directory listing
      function renderDirectoryListing(path, files) {
        folderTree.innerHTML = '';
        
        // Sort files: directories first, then files
        files.sort((a, b) => {
          if (a.isDirectory && !b.isDirectory) return -1;
          if (!a.isDirectory && b.isDirectory) return 1;
          return a.name.localeCompare(b.name);
        });
        
        files.forEach(file => {
          const fullPath = `${path}/${file.name}`.replace(/\/\//g, '/');
          
          if (file.isDirectory) {
            const folderItem = document.createElement('li');
            folderItem.className = 'folder-item';
            folderItem.innerHTML = `
              <div class="folder-name" data-path="${fullPath}">
                <span class="folder-icon">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z"/>
                  </svg>
                </span>
                ${file.name}
              </div>
              <ul class="folder-contents"></ul>
            `;
            
            folderTree.appendChild(folderItem);
            
            // Add event listener to expand/collapse folder
            const folderName = folderItem.querySelector('.folder-name');
            const folderContents = folderItem.querySelector('.folder-contents');
            
            folderName.addEventListener('click', () => {
              if (folderContents.classList.contains('open')) {
                folderContents.classList.remove('open');
                folderName.querySelector('.folder-icon').innerHTML = `
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z"/>
                  </svg>
                `;
              } else {
                folderContents.classList.add('open');
                folderName.querySelector('.folder-icon').innerHTML = `
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M1.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5h-13zm13 1a.5.5 0 0 1 .5.5V14a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5V2.5A.5.5 0 0 1 2 2h12z"/>
                    <path d="M8.5 0a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V.5a.5.5 0 0 1 .5-.5z"/>
                    <path d="M6.5 8.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H7a.5.5 0 0 1-.5-.5z"/>
                  </svg>
                `;
                
                // Load folder contents if not already loaded
                if (folderContents.children.length === 0) {
                  socket.emit('list-directory', { path: fullPath });
                  
                  // Handle the directory listing for this specific folder
                  const onDirList = (data) => {
                    if (data.path === fullPath) {
                      folderContents.innerHTML = '';
                      
                      // Sort files: directories first, then files
                      data.files.sort((a, b) => {
                        if (a.isDirectory && !b.isDirectory) return -1;
                        if (!a.isDirectory && b.isDirectory) return 1;
                        return a.name.localeCompare(b.name);
                      });
                      
                      data.files.forEach(subFile => {
                        const subPath = `${data.path}/${subFile.name}`.replace(/\/\//g, '/');
                        
                        if (subFile.isDirectory) {
                          const subFolderItem = document.createElement('li');
                          subFolderItem.className = 'folder-item';
                          subFolderItem.innerHTML = `
                            <div class="folder-name" data-path="${subPath}">
                              <span class="folder-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                  <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z"/>
                                </svg>
                              </span>
                              ${subFile.name}
                            </div>
                            <ul class="folder-contents"></ul>
                          `;
                          
                          folderContents.appendChild(subFolderItem);
                          
                          // Add event listener to subfolders recursively
                          const subFolderName = subFolderItem.querySelector('.folder-name');
                          const subFolderContents = subFolderItem.querySelector('.folder-contents');
                          
                          subFolderName.addEventListener('click', (e) => {
                            e.stopPropagation();
                            
                            if (subFolderContents.classList.contains('open')) {
                              subFolderContents.classList.remove('open');
                              subFolderName.querySelector('.folder-icon').innerHTML = `
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                  <path d="M.54 3.87.5 3a2 2 0 0 1 2-2h3.672a2 2 0 0 1 1.414.586l.828.828A2 2 0 0 0 9.828 3h3.982a2 2 0 0 1 1.992 2.181l-.637 7A2 2 0 0 1 13.174 14H2.826a2 2 0 0 1-1.991-1.819l-.637-7a1.99 1.99 0 0 1 .342-1.31zM2.19 4a1 1 0 0 0-.996 1.09l.637 7a1 1 0 0 0 .995.91h10.348a1 1 0 0 0 .995-.91l.637-7A1 1 0 0 0 13.81 4H2.19zm4.69-1.707A1 1 0 0 0 6.172 2H2.5a1 1 0 0 0-1 .981l.006.139C1.72 3.042 1.95 3 2.19 3h5.396l-.707-.707z"/>
                                </svg>
                              `;
                            } else {
                              subFolderContents.classList.add('open');
                              subFolderName.querySelector('.folder-icon').innerHTML = `
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                  <path d="M1.5 1a.5.5 0 0 0-.5.5v13a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-13a.5.5 0 0 0-.5-.5h-13zm13 1a.5.5 0 0 1 .5.5V14a.5.5 0 0 1-.5.5H2a.5.5 0 0 1-.5-.5V2.5A.5.5 0 0 1 2 2h12z"/>
                                  <path d="M8.5 0a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V.5a.5.5 0 0 1 .5-.5z"/>
                                  <path d="M6.5 8.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H7a.5.5 0 0 1-.5-.5z"/>
                                </svg>
                              `;
                              
                              // Load subfolder contents
                              if (subFolderContents.children.length === 0) {
                                socket.emit('list-directory', { path: subPath });
                              }
                            }
                          });
                        } else {
                          const fileItem = document.createElement('li');
                          fileItem.className = 'file-item';
                          fileItem.setAttribute('data-path', subPath);
                          
                          // Determine file icon based on extension
                          let fileIcon = '';
                          const ext = subFile.name.split('.').pop().toLowerCase();
                          
                          if (['js', 'jsx', 'ts', 'tsx'].includes(ext)) {
                            fileIcon = `
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#F7DF1E" viewBox="0 0 16 16">
                                <path d="M0 0h16v16H0V0z"/>
                                <path fill="#000" d="M4.47 12.5c.17.27.34.48.59.64.25.16.55.24.89.24.4 0 .7-.13.91-.37.21-.24.32-.56.32-.96v-5h1.5v5.05c0 .85-.23 1.47-.69 1.86-.46.39-1.12.58-1.99.58-.58 0-1.07-.09-1.47-.28-.4-.18-.72-.47-.96-.86l.9-.89zM11.1 8h1.5v3.76a3.75 3.75 0 01-.01.38c-.01.12-.03.23-.06.35-.03.11-.08.22-.16.35-.08.13-.17.24-.27.35-.1.1-.25.21-.43.31-.18.1-.38.18-.59.24-.21.06-.47.09-.77.09a2.2 2.2 0 01-.8-.14c-.23-.1-.45-.24-.65-.43l.63-1c.1.1.23.19.39.28.15.09.31.13.47.13.16 0 .29-.02.4-.06.1-.04.19-.09.26-.16.06-.06.11-.15.15-.27.03-.11.05-.22.05-.34 0-.01 0-.01 0-.02V8H11.1z"/>
                              </svg>
                            `;
                          } else if (['html', 'htm', 'xml'].includes(ext)) {
                            fileIcon = `
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#E34F26" viewBox="0 0 16 16">
                                <path d="M0 0h16v16H0z"/>
                                <path fill="#FFF" d="M5.41 3L4.02 13l3.99 1 4.001-1L10.6 3H5.41z"/>
                                <path fill="#E34F26" d="M8.002 12.39l3.24-.81.762-8.07H8.002v8.88z"/>
                                <path fill="#FF6D00" d="M8.002 6.97h-1.63l-.11-1.24H8v-1.2H5.03l.03.33.33 3.74h2.64V6.97z"/>
                                <path fill="#FFF" d="M8 9.83l-.01.003-1.02-.26-.07-.74H5.71l.13 1.4 2.15.6.017-.004V9.83z"/>
                                <path fill="#EBEBEB" d="M6.277 7.9h1.725v.72l-1.62.001-.102-.72z"/>
                                <path fill="#EBEBEB" d="M8.002 9.83v.997l-.017.004-2.142-.582-.013-.158-.23-2.47h1.04l.12 1.33 1.24.339v.539h.002z"/>
                                <path fill="#FFF" d="M9.63 6.97l-.11 1.24h-1.52v-1.24h1.63zm.13 1.57l-.13 1.48-1.62.44v-.84l.84-.23.06-.67h.85z"/>
                                <path fill="#FFF" d="M10.997 5.73l.032-.34h-3.02v1.2h1.752l-.11 1.24h-1.63v1.2h1.52l-.14 1.57-.84.23v.84l1.54-.42.02-.19.18-1.97.02-.21.14-1.52.03-.33.11-1.24z"/>
                              </svg>
                            `;
                          } else if (['css', 'scss', 'sass', 'less'].includes(ext)) {
                            fileIcon = `
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#1572B6" viewBox="0 0 16 16">
                                <path d="M0 0h16v16H0z"/>
                                <path fill="#1572B6" d="M12.824 3.333H3.176L4 12.652l4 1.015 4-1.015.824-9.319z"/>
                                <path fill="#33A9DC" d="M8 12.776l3.238-.819.76-8.57H8v9.39z"/>
                                <path fill="#FFF" d="M8 6.286h1.62l.113-1.232H8V3.842h3.08l-.03.336-.303 3.34H8v1.211z"/>
                                <path fill="#EBEBEB" d="M8.004 9.671l-.002.001-1.338-.352-.086-.937H5.344l.17 1.843 2.487.675.003-.001v-1.229z"/>
                                <path fill="#FFF" d="M9.5 8.098l-.148 1.63-1.35.358v1.226l2.483-.673.018-.201.284-3.154-1.287.814z"/>
                                <path fill="#EBEBEB" d="M6.99 6.285l.112-1.232h.902V3.842H5.013l.03.336.284 3.118 1.663-1.01z"/>
                                <path fill="#EBEBEB" d="M5.343 6.54h1.235l-.118 1.274-1.117.708v1.212l2.065-1.257.015-.173.238-2.594.025-.27H5.343V6.54z"/>
                              </svg>
                            `;
                          } else if (['json'].includes(ext)) {
                            fileIcon = `
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#000" viewBox="0 0 16 16">
                                <path d="M0 0h16v16H0z"/>
                                <path fill="#FBC02D" d="M16 8A8 8 0 108.63 16 3.5 3.5 0 0112 12.5v-9A3.5 3.5 0 018.5 0 .5.5 0 008 .5v3a.5.5 0 01-.5.5 3 3 0 103 3 .5.5 0 01.5-.5h3a.5.5 0 01.5.5A8 8 0 0116 8z"/>
                              </svg>
                            `;
                          } else if (['md', 'markdown'].includes(ext)) {
                            fileIcon = `
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"/>
                                <path fill-rule="evenodd" d="M9.146 8.146a.5.5 0 0 1 .708 0L11.5 9.793l1.646-1.647a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 0-.708z"/>
                                <path fill-rule="evenodd" d="M11.5 5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 1 .5-.5z"/>
                                <path d="M3.56 11V7.01h.056l1.428 3.239h.774l1.42-3.24h.056V11h1.073V5.001h-1.2l-1.71 3.894h-.039l-1.71-3.894H2.5V11h1.06z"/>
                              </svg>
                            `;
                          } else {
                            fileIcon = `
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"/>
                              </svg>
                            `;
                          }
                          
                          fileItem.innerHTML = `
                            <span class="file-icon">
                              ${fileIcon}
                            </span>
                            ${subFile.name}
                          `;
                          
                          folderContents.appendChild(fileItem);
                          
                          // Add event listener to view file
                          fileItem.addEventListener('click', (e) => {
                            e.stopPropagation();
                            viewFile(subPath);
                          });
                        }
                      });
                      
                      // Remove this listener as we've handled the event
                      socket.off('directory-list', onDirList);
                    }
                  };
                  
                  socket.on('directory-list', onDirList);
                }
              }
            });
          } else {
            const fileItem = document.createElement('li');
            fileItem.className = 'file-item';
            fileItem.setAttribute('data-path', fullPath);
            
            // Determine file icon based on extension
            let fileIcon = '';
            const ext = file.name.split('.').pop().toLowerCase();
            
            if (['js', 'jsx', 'ts', 'tsx'].includes(ext)) {
              fileIcon = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#F7DF1E" viewBox="0 0 16 16">
                  <path d="M0 0h16v16H0V0z"/>
                  <path fill="#000" d="M4.47 12.5c.17.27.34.48.59.64.25.16.55.24.89.24.4 0 .7-.13.91-.37.21-.24.32-.56.32-.96v-5h1.5v5.05c0 .85-.23 1.47-.69 1.86-.46.39-1.12.58-1.99.58-.58 0-1.07-.09-1.47-.28-.4-.18-.72-.47-.96-.86l.9-.89zM11.1 8h1.5v3.76a3.75 3.75 0 01-.01.38c-.01.12-.03.23-.06.35-.03.11-.08.22-.16.35-.08.13-.17.24-.27.35-.1.1-.25.21-.43.31-.18.1-.38.18-.59.24-.21.06-.47.09-.77.09a2.2 2.2 0 01-.8-.14c-.23-.1-.45-.24-.65-.43l.63-1c.1.1.23.19.39.28.15.09.31.13.47.13.16 0 .29-.02.4-.06.1-.04.19-.09.26-.16.06-.06.11-.15.15-.27.03-.11.05-.22.05-.34 0-.01 0-.01 0-.02V8H11.1z"/>
                </svg>
              `;
            } else if (['html', 'htm', 'xml'].includes(ext)) {
              fileIcon = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#E34F26" viewBox="0 0 16 16">
                  <path d="M0 0h16v16H0z"/>
                  <path fill="#FFF" d="M5.41 3L4.02 13l3.99 1 4.001-1L10.6 3H5.41z"/>
                  <path fill="#E34F26" d="M8.002 12.39l3.24-.81.762-8.07H8.002v8.88z"/>
                  <path fill="#FF6D00" d="M8.002 6.97h-1.63l-.11-1.24H8v-1.2H5.03l.03.33.33 3.74h2.64V6.97z"/>
                  <path fill="#FFF" d="M8 9.83l-.01.003-1.02-.26-.07-.74H5.71l.13 1.4 2.15.6.017-.004V9.83z"/>
                  <path fill="#EBEBEB" d="M6.277 7.9h1.725v.72l-1.62.001-.102-.72z"/>
                  <path fill="#EBEBEB" d="M8.002 9.83v.997l-.017.004-2.142-.582-.013-.158-.23-2.47h1.04l.12 1.33 1.24.339v.539h.002z"/>
                  <path fill="#FFF" d="M9.63 6.97l-.11 1.24h-1.52v-1.24h1.63zm.13 1.57l-.13 1.48-1.62.44v-.84l.84-.23.06-.67h.85z"/>
                  <path fill="#FFF" d="M10.997 5.73l.032-.34h-3.02v1.2h1.752l-.11 1.24h-1.63v1.2h1.52l-.14 1.57-.84.23v.84l1.54-.42.02-.19.18-1.97.02-.21.14-1.52.03-.33.11-1.24z"/>
                </svg>
              `;
            } else if (['css', 'scss', 'sass', 'less'].includes(ext)) {
              fileIcon = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#1572B6" viewBox="0 0 16 16">
                  <path d="M0 0h16v16H0z"/>
                  <path fill="#1572B6" d="M12.824 3.333H3.176L4 12.652l4 1.015 4-1.015.824-9.319z"/>
                  <path fill="#33A9DC" d="M8 12.776l3.238-.819.76-8.57H8v9.39z"/>
                  <path fill="#FFF" d="M8 6.286h1.62l.113-1.232H8V3.842h3.08l-.03.336-.303 3.34H8v1.211z"/>
                  <path fill="#EBEBEB" d="M8.004 9.671l-.002.001-1.338-.352-.086-.937H5.344l.17 1.843 2.487.675.003-.001v-1.229z"/>
                  <path fill="#FFF" d="M9.5 8.098l-.148 1.63-1.35.358v1.226l2.483-.673.018-.201.284-3.154-1.287.814z"/>
                  <path fill="#EBEBEB" d="M6.99 6.285l.112-1.232h.902V3.842H5.013l.03.336.284 3.118 1.663-1.01z"/>
                  <path fill="#EBEBEB" d="M5.343 6.54h1.235l-.118 1.274-1.117.708v1.212l2.065-1.257.015-.173.238-2.594.025-.27H5.343V6.54z"/>
                </svg>
              `;
            } else if (['json'].includes(ext)) {
              fileIcon = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#000" viewBox="0 0 16 16">
                  <path d="M0 0h16v16H0z"/>
                  <path fill="#FBC02D" d="M16 8A8 8 0 108.63 16 3.5 3.5 0 0112 12.5v-9A3.5 3.5 0 018.5 0 .5.5 0 008 .5v3a.5.5 0 01-.5.5 3 3 0 103 3 .5.5 0 01.5-.5h3a.5.5 0 01.5.5A8 8 0 0116 8z"/>
                </svg>
              `;
            } else if (['md', 'markdown'].includes(ext)) {
              fileIcon = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M14 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h12zM2 2a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H2z"/>
                  <path fill-rule="evenodd" d="M9.146 8.146a.5.5 0 0 1 .708 0L11.5 9.793l1.646-1.647a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 0-.708z"/>
                  <path fill-rule="evenodd" d="M11.5 5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0v-4a.5.5 0 0 1 .5-.5z"/>
                  <path d="M3.56 11V7.01h.056l1.428 3.239h.774l1.42-3.24h.056V11h1.073V5.001h-1.2l-1.71 3.894h-.039l-1.71-3.894H2.5V11h1.06z"/>
                </svg>
              `;
            } else {
              fileIcon = `
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M14 4.5V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h5.5L14 4.5zm-3 0A1.5 1.5 0 0 1 9.5 3V1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h-2z"/>
                </svg>
              `;
            }
            
            fileItem.innerHTML = `
              <span class="file-icon">
                ${fileIcon}
              </span>
              ${file.name}
            `;
            
            folderTree.appendChild(fileItem);
            
            // Add event listener to view file
            fileItem.addEventListener('click', () => {
              viewFile(fullPath);
            });
          }
        });
      }
      
      // Update file path breadcrumb
      function updateFileBreadcrumb(path) {
        filePathBreadcrumb.innerHTML = '';
        
        // Split path into segments
        const segments = path.split('/').filter(segment => segment);
        let currentPath = '';
        
        // Add root segment
        const rootSegment = document.createElement('span');
        rootSegment.className = 'path-segment';
        rootSegment.textContent = '~';
        rootSegment.setAttribute('data-path', '/home/<%= username %>');
        rootSegment.addEventListener('click', () => {
          listDirectory('/home/<%= username %>');
          currentPath = '/home/<%= username %>';
          updateFileBreadcrumb(currentPath);
        });
        
        filePathBreadcrumb.appendChild(rootSegment);
        
        // Add each path segment
        segments.forEach((segment, index) => {
          // Add separator
          const separator = document.createElement('span');
          separator.className = 'path-separator';
          separator.textContent = ' / ';
          filePathBreadcrumb.appendChild(separator);
          
          // Build cumulative path
          currentPath += `/${segment}`;
          
          // Add segment
          const segmentElement = document.createElement('span');
          segmentElement.className = 'path-segment';
          segmentElement.textContent = segment;
          segmentElement.setAttribute('data-path', currentPath);
          
          // Add click event to navigate to this path
          segmentElement.addEventListener('click', () => {
            const segmentPath = segmentElement.getAttribute('data-path');
            listDirectory(segmentPath);
            updateFileBreadcrumb(segmentPath);
          });
          
          filePathBreadcrumb.appendChild(segmentElement);
        });
      }
      
      // View file contents
      function viewFile(path) {
        socket.emit('read-file', { path });
        currentFilePreview = path;
      }
      
      // Show file preview modal
      function showFilePreview(path, content) {
        const filename = path.split('/').pop();
        previewFilename.textContent = filename;
        
        // Determine file type for syntax highlighting
        const ext = filename.split('.').pop().toLowerCase();
        
        // Set content with syntax highlighting if applicable
        let highlightedContent = content;
        
        // Apply basic syntax highlighting based on file extension
        if (['js', 'jsx', 'ts', 'tsx', 'json', 'html', 'css', 'scss', 'sass', 'less', 'md', 'markdown', 'php', 'py', 'rb', 'java', 'c', 'cpp', 'cs'].includes(ext)) {
          // This is a simple highlighting - in a real application you would use a library like Prism.js
          filePreviewContent.innerHTML = `<pre class="file-code">${escapeHtml(content)}</pre>`;
        } else {
          filePreviewContent.innerHTML = `<pre class="file-code">${escapeHtml(content)}</pre>`;
        }
        
        // Show modal
        filePreviewModal.style.display = 'flex';
        
        // Add share button handler
        shareFileBtn.onclick = () => {
          shareFileInChat(path, content);
          filePreviewModal.style.display = 'none';
        };
      }
      
      // Share file in chat
      function shareFileInChat(path, content) {
        const filename = path.split('/').pop();
        const fileExt = filename.split('.').pop().toLowerCase();
        
        // Truncate content if it's too long
        let truncatedContent = content;
        if (content.length > 2000) {
          truncatedContent = content.substring(0, 1997) + '...';
        }
        
        // Add file context for AI
        if (!fileContext.some(f => f.path === path)) {
          fileContext.push({ 
            path, 
            filename,
            ext: fileExt,
            content: truncatedContent,
            timestamp: new Date().toISOString()
          });
        }
        
        // Add message with file content
        const message = `I'm sharing the file "${filename}" for context:\n\`\`\`${fileExt}\n${truncatedContent}\n\`\`\``;
        addUserMessage(message, path);
      }
      
      // Handle file preview modal close
      filePreviewClose.addEventListener('click', () => {
        filePreviewModal.style.display = 'none';
      });
      
      closePreviewBtn.addEventListener('click', () => {
        filePreviewModal.style.display = 'none';
      });
      
      // Handle sending a message
      chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const message = messageInput.value.trim();
        if (!message) return;
        
        // Handle chat commands
        if (message.startsWith('/')) {
          handleChatCommand(message);
          return;
        }
        
        // Add user message to chat
        addUserMessage(message);
        
        // Clear input
        messageInput.value = '';
        sendButton.disabled = true;
        
        // Handle large messages with the protocol
        if (message.length > 1000) {
          sendLargeMessage(message);
        } else {
          processUserMessage(message);
        }
      });
      
      // Process a normal user message
      function processUserMessage(message) {
        // Show typing indicator
        showTypingIndicator();
        
        // Determine relevant file context to include
        let relevantContext = [];
        if (chatSettings.autoShareContext && fileContext.length > 0) {
          // For demo, include last 2 files as context
          relevantContext = fileContext.slice(-2);
        }
        
        // Create the API request
        const apiRequest = {
          model: getModelForProvider(chatSettings.apiProvider),
          messages: formatChatHistoryForAPI(relevantContext),
          max_tokens: Math.min(chatSettings.tokenLimit, 16000),
          temperature: chatSettings.temperature,
          stream: false
        };
        
        // In a real application, you would send this to the appropriate API
        // Here we'll simulate a response
        setTimeout(() => {
          hideTypingIndicator();
          
          // Simulate AI response
          const aiResponse = simulateAIResponse(message);
          addAssistantMessage(aiResponse);
          
          // Update chat history
          chatHistory.push({
            role: 'assistant',
            content: aiResponse,
            timestamp: new Date().toISOString()
          });
          
          // Save chat history
          saveChatHistory();
        }, 1500);
      }
      
      // Send large message using the protocol
      function sendLargeMessage(message) {
        // Calculate chunks (limit each to 1000 characters)
        const chunkSize = 1000;
        const chunks = [];
        
        for (let i = 0; i < message.length; i += chunkSize) {
          chunks.push(message.substring(i, i + chunkSize));
        }
        
        // Start multi-part message process
        isProcessingLargeMessage = true;
        largeMessageBuffer = [];
        
        // Send initial message
        addSystemMessage('Beginning multi-part message. Please wait while all parts are processed...');
        
        // Send first chunk
        sendMessageChunk(chunks, 0);
      }
      
      // Send message chunk
      function sendMessageChunk(chunks, index) {
        const isLastChunk = index === chunks.length - 1;
        const marker = isLastChunk ? '[END]' : '[CONTINUE]';
        const chunk = chunks[index] + '\n' + marker;
        
        // Add to buffer
        largeMessageBuffer.push(chunks[index]);
        
        // Show in chat as system message
        addSystemMessage(`Part ${index + 1}/${chunks.length}: ${chunks[index].substring(0, 30)}... ${marker}`);
        
        if (isLastChunk) {
          // Last chunk, process the complete message
          const fullMessage = largeMessageBuffer.join('');
          isProcessingLargeMessage = false;
          largeMessageBuffer = [];
          
          // Process the full message
          addSystemMessage('All parts received. Processing message...');
          processUserMessage(fullMessage);
        } else {
          // Wait for confirmation before sending next chunk
          addSystemMessage('Type "continue" to receive the next part...');
          
          // Add one-time event listener for continue message
          const onContinue = (e) => {
            const continueInput = messageInput.value.trim().toLowerCase();
            if (continueInput === 'continue') {
              e.preventDefault();
              messageInput.value = '';
              sendButton.disabled = true;
              
              // Send next chunk
              sendMessageChunk(chunks, index + 1);
              
              // Remove this listener
              chatForm.removeEventListener('submit', onContinue);
            }
          };
          
          chatForm.addEventListener('submit', onContinue);
        }
      }
      
      // Get appropriate model for provider
      function getModelForProvider(provider) {
        switch (provider) {
          case 'openai':
            return 'gpt-4-turbo';
          case 'anthropic':
            return 'claude-3-opus';
          case 'deepseek':
            return 'deepseek-coder';
          default:
            return 'gpt-4-turbo';
        }
      }
      
      // Format chat history for API request
      function formatChatHistoryForAPI(relevantContext) {
        // Start with a system message that includes file context
        const messages = [
          {
            role: 'system',
            content: `You are an AI assistant helping with a code project over SSH. ${
              relevantContext.length > 0 
                ? `\n\nRelevant file context:\n${relevantContext.map(file => 
                    `File: ${file.path}\n\`\`\`${file.ext}\n${file.content}\n\`\`\``
                  ).join('\n\n')}`
                : ''
            }`
          }
        ];
        
        // Add chat history (limited to last 10 messages)
        const recentHistory = chatHistory.slice(-10);
        recentHistory.forEach(msg => {
          messages.push({
            role: msg.role,
            content: msg.content
          });
        });
        
        return messages;
      }
      
      // Simulate AI response (in a real app, this would be an API call)
      function simulateAIResponse(message) {
        const responses = [
          `I've analyzed your message: "${message.substring(0, 20)}...". Based on the code context, I would suggest looking at how the file structure is organized. Let me know if you'd like me to explain any specific part of the codebase.`,
          
          `That's a good question about "${message.substring(0, 15)}...". When working with this kind of project, it's important to consider how the different components interact. I'd recommend checking the file dependencies to understand the relationships better.`,
          
          `I've looked at your question: "${message.substring(0, 25)}...". Based on the project structure, this seems to be a Node.js application with Express. The server.js file contains the main server logic, and the routing is handled through Express middleware.`,
          
          `Based on my analysis of the project and your question about "${message.substring(0, 15)}...", I can see this is using Socket.IO for real-time communication. The implementation follows a standard pattern for handling connection events and message passing.`,
          
          `Looking at the codebase and your message: "${message.substring(0, 20)}...", I notice this project implements an SSH client with web interfaces. Let me explain how it works: the server establishes an SSH connection using the ssh2 library, and then exposes functionality through web interfaces using Express and Socket.IO.`
        ];
        
        return responses[Math.floor(Math.random() * responses.length)];
      }
      
      // Handle chat commands
      function handleChatCommand(command) {
        const cmd = command.toLowerCase();
        
        switch (cmd) {
          case '/help':
            addSystemMessage('Available commands:');
            addSystemMessage('/help - Show available commands');
            addSystemMessage('/clear - Clear chat history');
            addSystemMessage('/files - List files in current directory');
            addSystemMessage('/cd [path] - Change directory');
            addSystemMessage('/cat [file] - Show file contents');
            addSystemMessage('/settings - Open settings panel');
            break;
            
          case '/clear':
            clearChatHistory();
            break;
            
          case '/files':
            listDirectoryInChat(currentPath);
            break;
            
          case '/settings':
            openSettingsModal();
            break;
            
          default:
            // Handle cd and cat commands
            if (cmd.startsWith('/cd ')) {
              const path = command.substring(4).trim();
              changeDirectoryInChat(path);
            } else if (cmd.startsWith('/cat ')) {
              const path = command.substring(5).trim();
              showFileInChat(path);
            } else {
              addSystemMessage(`Unknown command: ${command}. Type /help for available commands.`);
            }
        }
        
        // Clear input
        messageInput.value = '';
        sendButton.disabled = true;
      }
      
      // List directory in chat
      function listDirectoryInChat(path) {
        addSystemMessage(`Listing files in ${path}...`);
        
        socket.emit('list-directory', { path });
        
        // Create one-time handler for directory listing
        const onDirList = (data) => {
          if (data.path === path) {
            let filesList = '';
            
            // Sort files: directories first, then files
            const sortedFiles = [...data.files].sort((a, b) => {
              if (a.isDirectory && !b.isDirectory) return -1;
              if (!a.isDirectory && b.isDirectory) return 1;
              return a.name.localeCompare(b.name);
            });
            
            sortedFiles.forEach(file => {
              if (file.isDirectory) {
                filesList += `📁 ${file.name}/\n`;
              } else {
                filesList += `📄 ${file.name}\n`;
              }
            });
            
            addSystemMessage(`Files in ${path}:\n\`\`\`\n${filesList}\`\`\``);
            
            // Remove this listener
            socket.off('directory-list', onDirList);
          }
        };
        
        socket.on('directory-list', onDirList);
      }
      
      // Change directory in chat
      function changeDirectoryInChat(path) {
        // Handle relative paths
        let newPath = path;
        if (!path.startsWith('/')) {
          newPath = `${currentPath}/${path}`.replace(/\/\//g, '/');
        }
        
        // Check if path exists
        socket.emit('list-directory', { path: newPath });
        
        // Create one-time handler for directory validation
        const onDirList = (data) => {
          if (data.path === newPath) {
            // Directory exists, update current path
            currentPath = newPath;
            updateFileBreadcrumb(currentPath);
            listDirectory(currentPath);
            addSystemMessage(`Changed directory to ${currentPath}`);
            
            // Remove this listener
            socket.off('directory-list', onDirList);
          }
        };
        
        // Create one-time handler for directory error
        const onDirError = (error) => {
          if (error.includes(newPath)) {
            addSystemMessage(`Error: Directory not found - ${newPath}`);
            
            // Remove these listeners
            socket.off('directory-list', onDirList);
            socket.off('sftp-error', onDirError);
          }
        };
        
        socket.on('directory-list', onDirList);
        socket.on('sftp-error', onDirError);
      }
      
      // Show file in chat
      function showFileInChat(path) {
        // Handle relative paths
        let filePath = path;
        if (!path.startsWith('/')) {
          filePath = `${currentPath}/${path}`.replace(/\/\//g, '/');
        }
        
        addSystemMessage(`Fetching file: ${filePath}...`);
        
        socket.emit('read-file', { path: filePath });
        
        // Create one-time handler for file content
        const onFileContent = (data) => {
          if (data.path === filePath) {
            const filename = filePath.split('/').pop();
            const fileExt = filename.split('.').pop().toLowerCase();
            
            // Truncate content if it's too long
            let content = data.content;
            if (content.length > 2000) {
              content = content.substring(0, 1997) + '...';
              addSystemMessage(`File content (truncated to 2000 chars):\n\`\`\`${fileExt}\n${content}\n\`\`\``);
            } else {
              addSystemMessage(`File content:\n\`\`\`${fileExt}\n${content}\n\`\`\``);
            }
            
            // Add to file context
            if (!fileContext.some(f => f.path === filePath)) {
              fileContext.push({ 
                path: filePath, 
                filename,
                ext: fileExt,
                content,
                timestamp: new Date().toISOString()
              });
            }
            
            // Remove this listener
            socket.off('file-content', onFileContent);
          }
        };
        
        // Create one-time handler for file error
        const onFileError = (error) => {
          addSystemMessage(`Error: Could not read file - ${error}`);
          
          // Remove these listeners
          socket.off('file-content', onFileContent);
          socket.off('sftp-error', onFileError);
        };
        
        socket.on('file-content', onFileContent);
        socket.on('sftp-error', onFileError);
      }
      
      // Toggle file selector
      toggleFileSelector.addEventListener('click', () => {
        if (fileSidebar.classList.contains('collapsed')) {
          fileSidebar.classList.remove('collapsed');
          sidebarToggle.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
            </svg>
          `;
        }
      });
      
      // List directory contents button
      listDirectoryBtn.addEventListener('click', () => {
        listDirectoryInChat(currentPath);
      });
      
      // Clear input button
      clearInputBtn.addEventListener('click', () => {
        messageInput.value = '';
        sendButton.disabled = true;
      });
      
      // Handle input changes
      messageInput.addEventListener('input', () => {
        sendButton.disabled = messageInput.value.trim() === '';
      });
      
      // Clear chat history
      clearChat.addEventListener('click', () => {
        clearChatHistory();
      });
      
      // Refresh chat
      refreshChat.addEventListener('click', () => {
        loadChatHistory();
      });
      
      // Settings management
      settingsButton.addEventListener('click', openSettingsModal);
      settingsClose.addEventListener('click', closeSettingsModal);
      settingsCancel.addEventListener('click', closeSettingsModal);
      
      function openSettingsModal() {
        settingsModal.style.display = 'flex';
      }
      
      function closeSettingsModal() {
        settingsModal.style.display = 'none';
      }
      
      // Save settings
      settingsSave.addEventListener('click', () => {
        saveChatSettings();
        closeSettingsModal();
        addSystemMessage('Chat settings updated. Changes will apply to new messages.');
      });
      
      // Update temperature display
      temperatureInput.addEventListener('input', () => {
        tempValue.textContent = temperatureInput.value;
      });
      
      // Add message to chat
      function addUserMessage(message, filePath = null) {
        const timestamp = new Date();
        
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message user';
        
        // Format message content
        let formattedContent = formatMessageContent(message);
        
        messageDiv.innerHTML = `
          <div class="message-header">
            <span class="message-sender">You</span>
            <span class="message-time">${formatTime(timestamp)}</span>
          </div>
          <div class="message-content">${formattedContent}</div>
        `;
        
        chatMessages.appendChild(messageDiv);
        
        // Update chat history
        chatHistory.push({
          role: 'user',
          content: message,
          timestamp: timestamp.toISOString(),
          filePath: filePath // Include file path if message includes file content
        });
        
        // Save chat history
        saveChatHistory();
        
        // Scroll to bottom
        scrollToBottom();
      }
      
      function addAssistantMessage(message) {
        const timestamp = new Date();
        
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message assistant';
        
        // Format message content
        let formattedContent = formatMessageContent(message);
        
        messageDiv.innerHTML = `
          <div class="message-header">
            <span class="message-sender">AI Assistant</span>
            <span class="message-time">${formatTime(timestamp)}</span>
          </div>
          <div class="message-content">${formattedContent}</div>
        `;
        
        chatMessages.appendChild(messageDiv);
        
        // Scroll to bottom
        scrollToBottom();
      }
      
      function addSystemMessage(message) {
        const timestamp = new Date();
        
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message assistant';
        
        // Format message content
        let formattedContent = formatMessageContent(message);
        
        messageDiv.innerHTML = `
          <div class="message-header">
            <span class="message-sender">System</span>
            <span class="message-time">${formatTime(timestamp)}</span>
          </div>
          <div class="message-content">${formattedContent}</div>
        `;
        
        chatMessages.appendChild(messageDiv);
        
        // Scroll to bottom
        scrollToBottom();
      }
      
      // Format message content with markdown-like syntax
      function formatMessageContent(content) {
        // Replace code blocks with HTML
        let formatted = content.replace(/```([a-z]*)\n([\s\S]*?)\n```/g, (match, language, code) => {
          return `<div class="code-block"><button class="copy-code-button">Copy</button><pre>${escapeHtml(code)}</pre></div>`;
        });
        
        // Replace inline code with HTML
        formatted = formatted.replace(/`([^`]+)`/g, (match, code) => {
          return `<code>${escapeHtml(code)}</code>`;
        });
        
        // Replace newlines with <br>
        formatted = formatted.replace(/\n/g, '<br>');
        
        return formatted;
      }
      
      // Show typing indicator
      function showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'typing-indicator';
        typingDiv.id = 'typing-indicator';
        typingDiv.textContent = 'AI is typing...';
        
        chatMessages.appendChild(typingDiv);
        
        // Scroll to bottom
        scrollToBottom();
      }
      
      // Hide typing indicator
      function hideTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
          typingIndicator.remove();
        }
      }
      
      // Format time for display
      function formatTime(date) {
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      }
      
      // Scroll to bottom of chat
      function scrollToBottom() {
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
      
      // Escape HTML characters
      function escapeHtml(unsafe) {
        return unsafe
          .replace(/&/g, "&amp;")
          .replace(/</g, "&lt;")
          .replace(/>/g, "&gt;")
          .replace(/"/g, "&quot;")
          .replace(/'/g, "&#039;");
      }
      
      // Save chat history to local storage
      function saveChatHistory() {
        // Create history object
        const history = {
          project_id: projectId,
          timestamp: new Date().toISOString(),
          messages: chatHistory,
          file_context: fileContext
        };
        
        // Save to localStorage for now (in a real app, you would save to server)
        localStorage.setItem(`chat_history_${projectId}`, JSON.stringify(history));
        
        // Also save to server
        socket.emit('save-chat-history', history);
      }
      
      // Load chat history from local storage
      function loadChatHistory() {
        // Clear current chat
        chatMessages.innerHTML = '';
        chatHistory = [];
        fileContext = [];
        
        // Try to load from localStorage
        const savedHistory = localStorage.getItem(`chat_history_${projectId}`);
        
        if (savedHistory) {
          try {
            const history = JSON.parse(savedHistory);
            
            // Restore messages
            history.messages.forEach(msg => {
              if (msg.role === 'user') {
                addUserMessage(msg.content, msg.filePath);
              } else if (msg.role === 'assistant') {
                addAssistantMessage(msg.content);
              }
              
              // Don't add to history again since addUserMessage/addAssistantMessage already do that
              chatHistory.pop();
            });
            
            // Restore original history
            chatHistory = history.messages;
            
            // Restore file context
            fileContext = history.file_context || [];
            
            addSystemMessage('Chat history loaded.');
          } catch (error) {
            console.error('Error loading chat history:', error);
            addSystemMessage('Error loading chat history.');
          }
        } else {
          addSystemMessage('No chat history found.');
        }
      }
      
      // Clear chat history
      function clearChatHistory() {
        // Clear messages
        chatMessages.innerHTML = '';
        
        // Clear history arrays
        chatHistory = [];
        fileContext = [];
        
        // Clear from localStorage
        localStorage.removeItem(`chat_history_${projectId}`);
        
        // Add welcome message
        addSystemMessage('Chat history cleared.');
        addSystemMessage('Welcome to the SSH AI Assistant! I can help you with:');
        addSystemMessage('- Exploring your project files and understanding code');
        addSystemMessage('- Answering questions about your project');
        addSystemMessage('- Suggesting code improvements or solutions');
        addSystemMessage('- Helping with development tasks and troubleshooting');
        addSystemMessage('\nYou can share files from the sidebar by clicking on them, or use the file button in the chat input to reference specific files. Type /help for more commands.');
      }
      
      // Copy code button functionality
      document.addEventListener('click', (e) => {
        if (e.target && e.target.classList.contains('copy-code-button')) {
          const codeBlock = e.target.nextElementSibling;
          const codeText = codeBlock.textContent;
          
          // Copy to clipboard
          navigator.clipboard.writeText(codeText)
            .then(() => {
              // Change button text temporarily
              const originalText = e.target.textContent;
              e.target.textContent = 'Copied!';
              
              // Reset after 2 seconds
              setTimeout(() => {
                e.target.textContent = originalText;
              }, 2000);
            })
            .catch(err => {
              console.error('Failed to copy code: ', err);
            });
        }
      });
      
      // Load chat settings
      loadChatSettings();
    });
  </script>
</body>
</html>